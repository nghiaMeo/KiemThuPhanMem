// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Check assertions
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinButton uIItem6Button = this.UICalculatorWindow.UIItemWindow.UIItem6Button;
            #endregion

            // Verify that the 'DisplayText' property of 'Calculator' title bar equals 'Calculator'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICalculatorTitleBarDisplayText, uICalculatorTitleBar.DisplayText, "Title is incorrect");

            // Verify that the 'Name' property of '6' button equals '6'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem6ButtonName, uIItem6Button.Name, "Button name is incorrect");
        }
        
        /// <summary>
        /// Check assertions
        /// </summary>
        public void CheckAssertions()
        {

            // Launch 'D:\Downloads\calc.exe'
            ApplicationUnderTest calcApplication = ApplicationUnderTest.Launch(this.CheckAssertionsParams.ExePath, this.CheckAssertionsParams.AlternateExePath);
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual CheckAssertionsParams CheckAssertionsParams
        {
            get
            {
                if ((this.mCheckAssertionsParams == null))
                {
                    this.mCheckAssertionsParams = new CheckAssertionsParams();
                }
                return this.mCheckAssertionsParams;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private CheckAssertionsParams mCheckAssertionsParams;
        
        private UICalculatorWindow mUICalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Calculator' title bar equals 'Calculator'
        /// </summary>
        public string UICalculatorTitleBarDisplayText = "Calculator";
        
        /// <summary>
        /// Verify that the 'Name' property of '6' button equals '6'
        /// </summary>
        public string UIItem6ButtonName = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckAssertionsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Downloads\calc.exe'
        /// </summary>
        public string ExePath = "D:\\Downloads\\calc.exe";
        
        /// <summary>
        /// Launch 'D:\Downloads\calc.exe'
        /// </summary>
        public string AlternateExePath = "D:\\Downloads\\calc.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICalculatorTitleBar
        {
            get
            {
                if ((this.mUICalculatorTitleBar == null))
                {
                    this.mUICalculatorTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICalculatorTitleBar.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICalculatorTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICalculatorTitleBar;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "136";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WinButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem6Button;
        #endregion
    }
}
